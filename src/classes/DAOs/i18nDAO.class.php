<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2013-02-24 17:18:46                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	abstract class i18nDAO extends Autoi18nDAO
	{
		const I18N = '_i18n';
		
		public function makeSelectHead()
		{
			static $selectHead = array();
			
			if (!isset($selectHead[$className = $this->getObjectName()])) {
				
				$table		= $this->getTable();
				$i18nTable	= $this->getTable().self::I18N;
				
				$object =
					OSQL::select()->
					from($table)->
					leftJoin(
						$i18nTable,
						Expression::andBlock(
							Expression::eq(
								DBField::create(
									$this->getIdName(),
									$table
								),
								DBField::create(
									'object_id',
									$i18nTable
								)
							),
							Expression::eqId(
								DBField::create(
									'language_id',
									$i18nTable
								),
								GlobalVar::me()->get('language')
							)
						)
					);
				
				$mapping = $this->i18nMapping();
				
				foreach ($this->getFields() as $field) {
					if (isset($mapping[$field]))
						$object->get(new DBField($field, $i18nTable));
					else
						$object->get(new DBField($field, $table));
				}
				
				$selectHead[$className] = $object;
			}
			
			return clone $selectHead[$className];
		}
		
		public function guessAtom(
			$atom,
			JoinCapableQuery $query,
			$table = null,
			$parentRequired = true,
			$prefix = null
		)
		{
			$mapping = $this->i18nMapping();
			
			if (
				is_string($atom)
				&& array_key_exists(
					$atom,
					$mapping
				)
			) {
				return new DBField(
					$mapping[$atom],
					$this->getTable().self::I18N
				);
			}
			
			return parent::guessAtom($atom, $query, $table, $parentRequired, $prefix);
		}
		
		public function i18nMapping()
		{
			static $mapping = array();
			
			if (!isset($mapping[$className = $this->getObjectName()])) {
				$map = call_user_func(array($className.self::I18N, 'proto'))->
					getMapping();
				
				unset($map['id']);
				unset($map['language']);
				unset($map['object']);
				
				$mapping[$className] = $map;
			}
			
			return $mapping[$className];
		}
		
		public function dropById($id)
		{
			$db = DBPool::me()->getByDao($this)->begin();
			$result = 0;
			
			try {
				$dao = call_user_func(array($this->getObjectName().self::I18N, 'dao'));
				
				$set = Criteria::create($dao)->
					setProjection(
						Projection::property('id')
					)->
					add(
						Expression::eq('object', $id)
					)->
					getCustomList();
				
				if (!empty($set)) {
					$dao->dropByIds(ArrayUtils::columnFromSet('id', $set));
				}
				
				$result = parent::dropById($id);
				$db->commit();
			} catch (Exception $e) {
				$db->rollback();
			}
			
			return $result;
		}
	}
