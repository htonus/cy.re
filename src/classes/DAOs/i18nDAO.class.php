<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2013-02-24 17:18:46                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	abstract class i18nDAO extends Autoi18nDAO
	{
		const I18N = '_i18n';
		
		protected $i18nProtoMapping	= array();
		protected $languageField	= null;
		protected $objectField		= null;
		protected $i18nTable		= null;

		public function makeSelectHead()
		{
			static $selectHead = array();
			
			if (!isset($selectHead[$className = $this->getObjectName()])) {
				
				$this->i18nSetup();
				
				$table = $this->getTable();
				
				$object =
					OSQL::select()->
					from($table)->
					leftJoin(
						$this->i18nTable,
						Expression::andBlock(
							Expression::eq(
								DBField::create(
									$this->getIdName(),
									$table
								),
								DBField::create(
									$this->objectField,
									$this->i18nTable
								)
							),
							Expression::eqId(
								DBField::create(
									$this->languageField,
									$this->i18nTable
								),
								GlobalVar::me()->get('language')
							)
						)
					);
				
				foreach ($this->getFields() as $field) {
					if (isset($this->i18nProtoMapping[$field]))
						$object->get(new DBField($field, $this->i18nTable));
					else
						$object->get(new DBField($field, $table));
				}
				
				$selectHead[$className] = $object;
			}
			
			return clone $selectHead[$className];
		}
		
		public function guessAtom(
			$atom,
			JoinCapableQuery $query,
			$table = null,
			$parentRequired = true,
			$prefix = null
		)
		{
			$this->i18nSetup();
			
			if (
				is_string($atom)
				&& array_key_exists(
					$atom,
					$this->i18nProtoMapping
				)
			) {
				return new DBField(
					$this->i18nProtoMapping[$atom],
					$this->i18nTable
				);
			}
			
			return parent::guessAtom($atom, $query, $table, $parentRequired, $prefix);
		}
		
		private function i18nSetup()
		{
			if (empty($this->i18nProtoMapping)) {

				$this->i18nProtoMapping =
					call_user_func(
						array($this->getObjectName().self::I18N, 'proto')
					)->
					getMapping();
				
				$this->languageField	= $this->i18nProtoMapping['language'];
				$this->objectField		= $this->i18nProtoMapping['object'];
				$this->i18nTable		= $this->getTable().self::I18N;
				
				unset($this->i18nProtoMapping['id']);
				unset($this->i18nProtoMapping['language']);
				unset($this->i18nProtoMapping['object']);
			}
			
			return $this;
		}
	}
