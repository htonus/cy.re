<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2013-11-08 11:16:13                    *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoRealty extends i18n implements Pictured, PreviewPictured, Created, Published
	{
		protected $i18n = null;
		protected $latitude = null;
		protected $longitude = null;
		protected $polygon = null;
		protected $realtyType = null;
		protected $realtyTypeId = null;
		protected $city = null;
		protected $cityId = null;
		protected $district = null;
		protected $districtId = null;
		protected $zip = null;
		protected $address = null;
		protected $preview = null;
		protected $previewId = null;
		protected $created = null;
		protected $published = null;
		protected $pictures = null;
		protected $features = null;
		protected $articles = null;
		protected $owner = null;
		protected $ownerId = null;
		
		/**
		 * @return RealtyI18nDAO
		**/
		public function getI18n($lazy = false)
		{
			if (!$this->i18n || ($this->i18n->isLazy() != $lazy)) {
				$this->i18n = new RealtyI18nDAO($this, $lazy);
			}
			
			return $this->i18n;
		}
		
		/**
		 * @return Realty
		**/
		public function fillI18n($collection, $lazy = false)
		{
			$this->i18n = new RealtyI18nDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->i18n->mergeList($collection);
			
			return $this;
		}
		
		public function getLatitude()
		{
			return $this->latitude;
		}
		
		/**
		 * @return Realty
		**/
		public function setLatitude($latitude)
		{
			$this->latitude = $latitude;
			
			return $this;
		}
		
		public function getLongitude()
		{
			return $this->longitude;
		}
		
		/**
		 * @return Realty
		**/
		public function setLongitude($longitude)
		{
			$this->longitude = $longitude;
			
			return $this;
		}
		
		public function getPolygon()
		{
			return $this->polygon;
		}
		
		/**
		 * @return Realty
		**/
		public function setPolygon($polygon)
		{
			$this->polygon = $polygon;
			
			return $this;
		}
		
		/**
		 * @return RealtyType
		**/
		public function getRealtyType()
		{
			if (!$this->realtyType && $this->realtyTypeId) {
				$this->realtyType = RealtyType::dao()->getById($this->realtyTypeId);
			}
			
			return $this->realtyType;
		}
		
		public function getRealtyTypeId()
		{
			return $this->realtyType
				? $this->realtyType->getId()
				: $this->realtyTypeId;
		}
		
		/**
		 * @return Realty
		**/
		public function setRealtyType(RealtyType $realtyType)
		{
			$this->realtyType = $realtyType;
			$this->realtyTypeId = $realtyType ? $realtyType->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function setRealtyTypeId($id)
		{
			$this->realtyType = null;
			$this->realtyTypeId = $id;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function dropRealtyType()
		{
			$this->realtyType = null;
			$this->realtyTypeId = null;
			
			return $this;
		}
		
		/**
		 * @return City
		**/
		public function getCity()
		{
			if (!$this->city && $this->cityId) {
				$this->city = City::dao()->getById($this->cityId);
			}
			
			return $this->city;
		}
		
		public function getCityId()
		{
			return $this->city
				? $this->city->getId()
				: $this->cityId;
		}
		
		/**
		 * @return Realty
		**/
		public function setCity(City $city = null)
		{
			$this->city = $city;
			$this->cityId = $city ? $city->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function setCityId($id = null)
		{
			$this->city = null;
			$this->cityId = $id;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function dropCity()
		{
			$this->city = null;
			$this->cityId = null;
			
			return $this;
		}
		
		/**
		 * @return District
		**/
		public function getDistrict()
		{
			if (!$this->district && $this->districtId) {
				$this->district = District::dao()->getById($this->districtId);
			}
			
			return $this->district;
		}
		
		public function getDistrictId()
		{
			return $this->district
				? $this->district->getId()
				: $this->districtId;
		}
		
		/**
		 * @return Realty
		**/
		public function setDistrict(District $district = null)
		{
			$this->district = $district;
			$this->districtId = $district ? $district->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function setDistrictId($id = null)
		{
			$this->district = null;
			$this->districtId = $id;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function dropDistrict()
		{
			$this->district = null;
			$this->districtId = null;
			
			return $this;
		}
		
		public function getZip()
		{
			return $this->zip;
		}
		
		/**
		 * @return Realty
		**/
		public function setZip($zip)
		{
			$this->zip = $zip;
			
			return $this;
		}
		
		public function getAddress()
		{
			return $this->address;
		}
		
		/**
		 * @return Realty
		**/
		public function setAddress($address)
		{
			$this->address = $address;
			
			return $this;
		}
		
		/**
		 * @return RealtyPicture
		**/
		public function getPreview()
		{
			if (!$this->preview && $this->previewId) {
				$this->preview = RealtyPicture::dao()->getById($this->previewId);
			}
			
			return $this->preview;
		}
		
		public function getPreviewId()
		{
			return $this->preview
				? $this->preview->getId()
				: $this->previewId;
		}
		
		/**
		 * @return Realty
		**/
		public function setPreview(RealtyPicture $preview = null)
		{
			$this->preview = $preview;
			$this->previewId = $preview ? $preview->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function setPreviewId($id = null)
		{
			$this->preview = null;
			$this->previewId = $id;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function dropPreview()
		{
			$this->preview = null;
			$this->previewId = null;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getCreated()
		{
			return $this->created;
		}
		
		/**
		 * @return Realty
		**/
		public function setCreated(Timestamp $created)
		{
			$this->created = $created;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function dropCreated()
		{
			$this->created = null;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getPublished()
		{
			return $this->published;
		}
		
		/**
		 * @return Realty
		**/
		public function setPublished(Timestamp $published = null)
		{
			$this->published = $published;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function dropPublished()
		{
			$this->published = null;
			
			return $this;
		}
		
		/**
		 * @return RealtyPicturesDAO
		**/
		public function getPictures($lazy = false)
		{
			if (!$this->pictures || ($this->pictures->isLazy() != $lazy)) {
				$this->pictures = new RealtyPicturesDAO($this, $lazy);
			}
			
			return $this->pictures;
		}
		
		/**
		 * @return Realty
		**/
		public function fillPictures($collection, $lazy = false)
		{
			$this->pictures = new RealtyPicturesDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->pictures->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return RealtyFeaturesDAO
		**/
		public function getFeatures($lazy = false)
		{
			if (!$this->features || ($this->features->isLazy() != $lazy)) {
				$this->features = new RealtyFeaturesDAO($this, $lazy);
			}
			
			return $this->features;
		}
		
		/**
		 * @return Realty
		**/
		public function fillFeatures($collection, $lazy = false)
		{
			$this->features = new RealtyFeaturesDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->features->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return RealtyArticlesDAO
		**/
		public function getArticles($lazy = false)
		{
			if (!$this->articles || ($this->articles->isLazy() != $lazy)) {
				$this->articles = new RealtyArticlesDAO($this, $lazy);
			}
			
			return $this->articles;
		}
		
		/**
		 * @return Realty
		**/
		public function fillArticles($collection, $lazy = false)
		{
			$this->articles = new RealtyArticlesDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->articles->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return Person
		**/
		public function getOwner()
		{
			if (!$this->owner && $this->ownerId) {
				$this->owner = Person::dao()->getById($this->ownerId);
			}
			
			return $this->owner;
		}
		
		public function getOwnerId()
		{
			return $this->owner
				? $this->owner->getId()
				: $this->ownerId;
		}
		
		/**
		 * @return Realty
		**/
		public function setOwner(Person $owner = null)
		{
			$this->owner = $owner;
			$this->ownerId = $owner ? $owner->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function setOwnerId($id = null)
		{
			$this->owner = null;
			$this->ownerId = $id;
			
			return $this;
		}
		
		/**
		 * @return Realty
		**/
		public function dropOwner()
		{
			$this->owner = null;
			$this->ownerId = null;
			
			return $this;
		}
	}
?>