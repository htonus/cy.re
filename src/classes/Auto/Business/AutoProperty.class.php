<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2013-02-11 11:29:22                    *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoProperty extends i18n
	{
		protected $object = null;
		protected $objectId = null;
		protected $name = null;
		protected $content = null;
		protected $features = null;
		
		/**
		 * @return Object
		**/
		public function getObject()
		{
			if (!$this->object && $this->objectId) {
				$this->object = Object::dao()->getById($this->objectId);
			}
			
			return $this->object;
		}
		
		public function getObjectId()
		{
			return $this->object
				? $this->object->getId()
				: $this->objectId;
		}
		
		/**
		 * @return Property
		**/
		public function setObject(Object $object)
		{
			$this->object = $object;
			$this->objectId = $object ? $object->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function setObjectId($id)
		{
			$this->object = null;
			$this->objectId = $id;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function dropObject()
		{
			$this->object = null;
			$this->objectId = null;
			
			return $this;
		}
		
		public function getName()
		{
			return $this->name;
		}
		
		/**
		 * @return Property
		**/
		public function setName($name)
		{
			$this->name = $name;
			
			return $this;
		}
		
		public function getContent()
		{
			return $this->content;
		}
		
		/**
		 * @return Property
		**/
		public function setContent($content)
		{
			$this->content = $content;
			
			return $this;
		}
		
		/**
		 * @return PropertyFeaturesDAO
		**/
		public function getFeatures($lazy = false)
		{
			if (!$this->features || ($this->features->isLazy() != $lazy)) {
				$this->features = new PropertyFeaturesDAO($this, $lazy);
			}
			
			return $this->features;
		}
		
		/**
		 * @return Property
		**/
		public function fillFeatures($collection, $lazy = false)
		{
			$this->features = new PropertyFeaturesDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->features->mergeList($collection);
			
			return $this;
		}
	}
?>