<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2013-05-27 21:28:10                    *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoStaticPage extends i18n
	{
		protected $type = null;
		protected $typeId = null;
		protected $section = null;
		protected $sectionId = null;
		protected $i18n = null;
		
		/**
		 * @return StaticType
		**/
		public function getType()
		{
			if (!$this->type && $this->typeId) {
				$this->type = new StaticType($this->typeId);
			}
			
			return $this->type;
		}
		
		public function getTypeId()
		{
			return $this->type
				? $this->type->getId()
				: $this->typeId;
		}
		
		/**
		 * @return StaticPage
		**/
		public function setType(StaticType $type)
		{
			$this->type = $type;
			$this->typeId = $type ? $type->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return StaticPage
		**/
		public function setTypeId($id)
		{
			$this->type = null;
			$this->typeId = $id;
			
			return $this;
		}
		
		/**
		 * @return StaticPage
		**/
		public function dropType()
		{
			$this->type = null;
			$this->typeId = null;
			
			return $this;
		}
		
		/**
		 * @return Section
		**/
		public function getSection()
		{
			if (!$this->section && $this->sectionId) {
				$this->section = new Section($this->sectionId);
			}
			
			return $this->section;
		}
		
		public function getSectionId()
		{
			return $this->section
				? $this->section->getId()
				: $this->sectionId;
		}
		
		/**
		 * @return StaticPage
		**/
		public function setSection(Section $section = null)
		{
			$this->section = $section;
			$this->sectionId = $section ? $section->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return StaticPage
		**/
		public function setSectionId($id = null)
		{
			$this->section = null;
			$this->sectionId = $id;
			
			return $this;
		}
		
		/**
		 * @return StaticPage
		**/
		public function dropSection()
		{
			$this->section = null;
			$this->sectionId = null;
			
			return $this;
		}
		
		/**
		 * @return StaticPageI18nDAO
		**/
		public function getI18n($lazy = false)
		{
			if (!$this->i18n || ($this->i18n->isLazy() != $lazy)) {
				$this->i18n = new StaticPageI18nDAO($this, $lazy);
			}
			
			return $this->i18n;
		}
		
		/**
		 * @return StaticPage
		**/
		public function fillI18n($collection, $lazy = false)
		{
			$this->i18n = new StaticPageI18nDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->i18n->mergeList($collection);
			
			return $this;
		}
	}
?>